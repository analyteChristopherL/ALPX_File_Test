<?xml version="1.0" encoding="UTF-8"?>
<ActiveObjectClass>
	<Id>1712308662908</Id>
	<Name><![CDATA[Train]]></Name>
	<Import><![CDATA[import java.lang.invoke.VolatileCallSite;]]></Import>
	<StartupCode><![CDATA[varStartTime = time(HOUR);

//if (parDisplayTrainJourney == false){
//	e_StateSpaceUpdate.suspend();
//}]]></StartupCode>
	<Generic>false</Generic>
	<GenericParameter>
		<Id>1712308662914</Id>
		<Name><![CDATA[1712308662914]]></Name>
		<GenericParameterValue Class="CodeValue">
			<Code><![CDATA[T extends Agent]]></Code>
		</GenericParameterValue>
		<GenericParameterLabel>Generic parameter:</GenericParameterLabel>
	</GenericParameter>
	<FlowChartsUsage>TRAIN</FlowChartsUsage>
	<SamplesToKeep>100</SamplesToKeep>
	<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
	<ElementsLimitValue>100</ElementsLimitValue>
	<MakeDefaultViewArea>true</MakeDefaultViewArea>
	<SceneGridColor/>
	<SceneBackgroundColor/>
	<SceneSkybox>null</SceneSkybox>
	<AgentProperties>
		<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
		<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
		<RotateAnimationVertically>false</RotateAnimationVertically>
		<VelocityCode Class="CodeUnitValue">
			<Code><![CDATA[10]]></Code>
			<Unit Class="SpeedUnits">MPS</Unit>
		</VelocityCode>
		<PhysicalLength Class="CodeUnitValue">
			<Code><![CDATA[1]]></Code>
			<Unit Class="LengthUnits">METER</Unit>
		</PhysicalLength>
		<PhysicalWidth Class="CodeUnitValue">
			<Code><![CDATA[1]]></Code>
			<Unit Class="LengthUnits">METER</Unit>
		</PhysicalWidth>
		<PhysicalHeight Class="CodeUnitValue">
			<Code><![CDATA[1]]></Code>
			<Unit Class="LengthUnits">METER</Unit>
		</PhysicalHeight>
	</AgentProperties>
	<EnvironmentProperties>
		<EnableSteps>false</EnableSteps>
		<StepDurationCode Class="CodeUnitValue">
			<Code><![CDATA[1.0]]></Code>
			<Unit Class="TimeUnits">SECOND</Unit>
		</StepDurationCode>
		<SpaceType>CONTINUOUS</SpaceType>
		<WidthCode>500</WidthCode>
		<HeightCode>500</HeightCode>
		<ZHeightCode>0</ZHeightCode>
		<ColumnsCountCode>100</ColumnsCountCode>
		<RowsCountCode>100</RowsCountCode>
		<NeigborhoodType>MOORE</NeigborhoodType>
		<LayoutType>USER_DEF</LayoutType>
		<LayoutTypeApplyOnStartup>true</LayoutTypeApplyOnStartup>
		<NetworkType>USER_DEF</NetworkType>
		<NetworkTypeApplyOnStartup>true</NetworkTypeApplyOnStartup>
		<ConnectionsPerAgentCode>2</ConnectionsPerAgentCode>
		<ConnectionsRangeCode>50</ConnectionsRangeCode>
		<NeighborLinkFractionCode>0.95</NeighborLinkFractionCode>
		<MCode>10</MCode>
	</EnvironmentProperties>
	<DatasetsCreationProperties>
		<AutoCreate>true</AutoCreate>
		<OccurrenceAtTime>true</OccurrenceAtTime>
		<OccurrenceDate>1712390400000</OccurrenceDate>
		<OccurrenceTime Class="CodeUnitValue">
			<Code><![CDATA[0]]></Code>
			<Unit Class="TimeUnits">MINUTE</Unit>
		</OccurrenceTime>
		<RecurrenceCode Class="CodeUnitValue">
			<Code><![CDATA[1]]></Code>
			<Unit Class="TimeUnits">MINUTE</Unit>
		</RecurrenceCode>
	</DatasetsCreationProperties>
	<ScaleRuler>
		<Id>1712308662911</Id>
		<Name><![CDATA[scale]]></Name>
		<X>0</X>
		<Y>-150</Y>
		<PublicFlag>false</PublicFlag>
		<PresentationFlag>false</PresentationFlag>
		<ShowLabel>false</ShowLabel>
		<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
		<Length>100</Length>
		<Rotation>0</Rotation>
		<ScaleType>BASED_ON_LENGTH</ScaleType>
		<ModelLength>10</ModelLength>
		<LengthUnits>METER</LengthUnits>
		<Scale>10</Scale>
		<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
	</ScaleRuler>
	<CurrentLevel>1712308662915</CurrentLevel>
	<ConnectionsId>1712308662909</ConnectionsId>
	<Variables xmlns:al="http://anylogic.com"/>
	<StatechartElements>
		<StatechartElement Class="State" ParentState="ROOT_NODE">
			<Id>1712644973770</Id>
			<Name><![CDATA[stStationary]]></Name>
			<X>170</X>
			<Y>490</Y>
			<Label>
				<X>10</X>
				<Y>10</Y>
			</Label>
			<PublicFlag>false</PublicFlag>
			<PresentationFlag>true</PresentationFlag>
			<ShowLabel>true</ShowLabel>
			<Properties Width="270" Height="30">
				<EntryAction>varVelocity = colTB.get(0).varVelocity;
//varVelocity = 0.0;

traceln("ST - train "+parDirection+" "+parIndex+" entered stStationary on "+colRoute.get(0)+" at "+time(HOUR));</EntryAction>
				<ExitAction>//pauseSimulation();
//traceln("ST - train exiting stStationary at "+time(HOUR));
varDelayBlock.stopDelay(this);

((Node_Loop)colRoute.get(0)).colTBN.remove(colTB.get(0));
colTB.remove(0);
colRoute.remove(0);
</ExitAction>
				<FillColor>-65536</FillColor>
			</Properties>
		</StatechartElement>
		<StatechartElement Class="State" ParentState="ROOT_NODE">
			<Id>1712645008248</Id>
			<Name><![CDATA[stMoving]]></Name>
			<X>170</X>
			<Y>660</Y>
			<Label>
				<X>10</X>
				<Y>10</Y>
			</Label>
			<PublicFlag>false</PublicFlag>
			<PresentationFlag>true</PresentationFlag>
			<ShowLabel>true</ShowLabel>
			<Properties Width="270" Height="30">
				<EntryAction>traceln("ST - train "+parDirection+" "+parIndex+" entered stMoving on "+colRoute.get(0)+" at "+time(HOUR));
varVelocity = colTB.get(0).varVelocity;

//pauseSimulation();</EntryAction>
				<ExitAction>//pauseSimulation();
//parModel.funConflictAvoidance();
varTravelBlock.stopDelay(this);
Segment segment = ((Segment)colRoute.get(0));

segment.colTBS.remove(colTB.get(0));
colTB.remove(0);
colRoute.remove(0);
</ExitAction>
				<FillColor>-16711936</FillColor>
			</Properties>
		</StatechartElement>
		<StatechartElement Class="State" ParentState="ROOT_NODE">
			<Id>1712746300158</Id>
			<Name><![CDATA[stStarting]]></Name>
			<X>10</X>
			<Y>550</Y>
			<Label>
				<X>10</X>
				<Y>10</Y>
			</Label>
			<PublicFlag>false</PublicFlag>
			<PresentationFlag>true</PresentationFlag>
			<ShowLabel>true</ShowLabel>
			<Properties Width="100" Height="30">
				<FillColor/>
			</Properties>
		</StatechartElement>
		<StatechartElement Class="State" ParentState="ROOT_NODE">
			<Id>1714649848910</Id>
			<Name><![CDATA[stTransition]]></Name>
			<X>155</X>
			<Y>575</Y>
			<Label>
				<X>10</X>
				<Y>10</Y>
			</Label>
			<PublicFlag>false</PublicFlag>
			<PresentationFlag>true</PresentationFlag>
			<ShowLabel>true</ShowLabel>
			<Properties Width="100" Height="30">
				<FillColor/>
			</Properties>
		</StatechartElement>
		<StatechartElement Class="State" ParentState="ROOT_NODE">
			<Id>1714649980810</Id>
			<Name><![CDATA[stTransition1]]></Name>
			<X>360</X>
			<Y>575</Y>
			<Label>
				<X>10</X>
				<Y>10</Y>
			</Label>
			<PublicFlag>false</PublicFlag>
			<PresentationFlag>true</PresentationFlag>
			<ShowLabel>true</ShowLabel>
			<Properties Width="100" Height="30">
				<FillColor/>
			</Properties>
		</StatechartElement>
		<StatechartElement Class="Transition" ParentState="ROOT_NODE">
			<Id>1712645156091</Id>
			<Name><![CDATA[transition1]]></Name>
			<X>400</X>
			<Y>660</Y>
			<Label>
				<X>10</X>
				<Y>0</Y>
			</Label>
			<PublicFlag>false</PublicFlag>
			<PresentationFlag>true</PresentationFlag>
			<ShowLabel>false</ShowLabel>
			<Points>
				<Point>
					<X>0</X>
					<Y>0</Y>
				</Point>
				<Point>
					<X>0</X>
					<Y>-55</Y>
				</Point>
			</Points>
			<IconOffset>20.0</IconOffset>
			<Properties Source="1712645008248" Target="1714649980810" Trigger="condition">
				<Action>//traceln("Transition - Train "+parDirection+" has entered Node "+time(HOUR));</Action>
				<Timeout Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="TimeUnits">SECOND</Unit>
				</Timeout>
				<Condition>parDirection == parModel.parTrainFromDistance0 &amp;&amp;
colTB.get(1).parResource instanceof Node_Loop &amp;&amp;
time(HOUR) &gt;= colTB.get(0).varTimeEnd</Condition>
				<Rate Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="RateUnits">PER_SECOND</Unit>
				</Rate>
				<MessageType>Object</MessageType>
				<DefaultTransition>true</DefaultTransition>
				<FilterType>equalsTo</FilterType>
				<EqualsExpression>"TakingCross"</EqualsExpression>
				<SatisfiesExpression>true</SatisfiesExpression>
			</Properties>
		</StatechartElement>
		<StatechartElement Class="EntryPoint" ParentState="ROOT_NODE">
			<Id>1712646056968</Id>
			<Name><![CDATA[statechart]]></Name>
			<X>60</X>
			<Y>670</Y>
			<Label>
				<X>-35</X>
				<Y>20</Y>
			</Label>
			<PublicFlag>false</PublicFlag>
			<PresentationFlag>true</PresentationFlag>
			<ShowLabel>true</ShowLabel>
			<Points>
				<Point>
					<X>0</X>
					<Y>0</Y>
				</Point>
				<Point>
					<X>0</X>
					<Y>-90</Y>
				</Point>
			</Points>
			<Properties Target="1712746300158"/>
		</StatechartElement>
		<StatechartElement Class="Transition" ParentState="ROOT_NODE">
			<Id>1712650560531</Id>
			<Name><![CDATA[transition7]]></Name>
			<X>420</X>
			<Y>660</Y>
			<Label>
				<X>10</X>
				<Y>0</Y>
			</Label>
			<PublicFlag>false</PublicFlag>
			<PresentationFlag>true</PresentationFlag>
			<ShowLabel>false</ShowLabel>
			<Points>
				<Point>
					<X>0</X>
					<Y>0</Y>
				</Point>
				<Point>
					<X>0</X>
					<Y>-55</Y>
				</Point>
			</Points>
			<IconOffset>20.0</IconOffset>
			<Properties Source="1712645008248" Target="1714649980810" Trigger="condition">
				<Action>//traceln("Transition - Train "+parDirection+" has entered Node "+time(HOUR));</Action>
				<Timeout Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="TimeUnits">SECOND</Unit>
				</Timeout>
				<Condition>parDirection == parModel.parTrainFromDistanceX &amp;&amp;
colTB.get(1).parResource instanceof Node_Loop &amp;&amp;
time(HOUR) &gt;= colTB.get(0).varTimeEnd</Condition>
				<Rate Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="RateUnits">PER_SECOND</Unit>
				</Rate>
				<MessageType>Object</MessageType>
				<DefaultTransition>true</DefaultTransition>
				<FilterType>equalsTo</FilterType>
				<EqualsExpression>"TakingCross"</EqualsExpression>
				<SatisfiesExpression>true</SatisfiesExpression>
			</Properties>
		</StatechartElement>
		<StatechartElement Class="Transition" ParentState="ROOT_NODE">
			<Id>1712674569638</Id>
			<Name><![CDATA[transition8]]></Name>
			<X>190</X>
			<Y>520</Y>
			<Label>
				<X>10</X>
				<Y>0</Y>
			</Label>
			<PublicFlag>false</PublicFlag>
			<PresentationFlag>true</PresentationFlag>
			<ShowLabel>false</ShowLabel>
			<Points>
				<Point>
					<X>0</X>
					<Y>0</Y>
				</Point>
				<Point>
					<X>0</X>
					<Y>55</Y>
				</Point>
			</Points>
			<IconOffset>25.0</IconOffset>
			<Properties Source="1712644973770" Target="1714649848910" Trigger="condition">
				<Action>if (!colRoute.isEmpty()){
	Segment segment = (Segment)colRoute.get(0);
	varVelocity = min(parCruiseVelocity, segment.parMaxSpeed);
}
//traceln("Transition - Train "+parDirection+" has exited Node "+time(HOUR));</Action>
				<Timeout Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="TimeUnits">SECOND</Unit>
				</Timeout>
				<Condition>parDirection == parModel.parTrainFromDistance0 &amp;&amp;
time(HOUR) &gt;= colTB.get(0).varTimeEnd</Condition>
				<Rate Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="RateUnits">PER_SECOND</Unit>
				</Rate>
				<MessageType>Object</MessageType>
				<DefaultTransition>true</DefaultTransition>
				<FilterType>unconditionally</FilterType>
				<EqualsExpression>"text"</EqualsExpression>
				<SatisfiesExpression>true</SatisfiesExpression>
			</Properties>
		</StatechartElement>
		<StatechartElement Class="Transition" ParentState="ROOT_NODE">
			<Id>1713868976951</Id>
			<Name><![CDATA[transition]]></Name>
			<X>100</X>
			<Y>550</Y>
			<Label>
				<X>10</X>
				<Y>0</Y>
			</Label>
			<PublicFlag>false</PublicFlag>
			<PresentationFlag>true</PresentationFlag>
			<ShowLabel>false</ShowLabel>
			<Points>
				<Point>
					<X>0</X>
					<Y>0</Y>
				</Point>
				<Point>
					<X>0</X>
					<Y>-40</Y>
				</Point>
				<Point>
					<X>70</X>
					<Y>-40</Y>
				</Point>
			</Points>
			<IconOffset>70.0</IconOffset>
			<Properties Source="1712746300158" Target="1712644973770" Trigger="message">
				<Action>funInitialseTrainData();
</Action>
				<Timeout Class="CodeUnitValue">
					<Code><![CDATA[5]]></Code>
					<Unit Class="TimeUnits">SECOND</Unit>
				</Timeout>
				<Condition>true</Condition>
				<Rate Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="RateUnits">PER_SECOND</Unit>
				</Rate>
				<MessageType>String</MessageType>
				<DefaultTransition>true</DefaultTransition>
				<FilterType>equalsTo</FilterType>
				<EqualsExpression>"Initialised"</EqualsExpression>
				<SatisfiesExpression>true</SatisfiesExpression>
			</Properties>
		</StatechartElement>
		<StatechartElement Class="Transition" ParentState="ROOT_NODE">
			<Id>1714646260395</Id>
			<Name><![CDATA[transition9]]></Name>
			<X>210</X>
			<Y>520</Y>
			<Label>
				<X>10</X>
				<Y>0</Y>
			</Label>
			<PublicFlag>false</PublicFlag>
			<PresentationFlag>true</PresentationFlag>
			<ShowLabel>false</ShowLabel>
			<Points>
				<Point>
					<X>0</X>
					<Y>0</Y>
				</Point>
				<Point>
					<X>0</X>
					<Y>55</Y>
				</Point>
			</Points>
			<IconOffset>25.0</IconOffset>
			<Properties Source="1712644973770" Target="1714649848910" Trigger="condition">
				<Action>if (!colRoute.isEmpty()){
	Segment segment = (Segment)colRoute.get(0);
	varVelocity = max(parCruiseVelocity, -segment.parMaxSpeed);
}
//traceln("Transition - Train "+parDirection+" has exited Node "+time(HOUR));</Action>
				<Timeout Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="TimeUnits">SECOND</Unit>
				</Timeout>
				<Condition>parDirection == parModel.parTrainFromDistanceX &amp;&amp;
time(HOUR) &gt;= colTB.get(0).varTimeEnd</Condition>
				<Rate Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="RateUnits">PER_SECOND</Unit>
				</Rate>
				<MessageType>Object</MessageType>
				<DefaultTransition>true</DefaultTransition>
				<FilterType>unconditionally</FilterType>
				<EqualsExpression>"text"</EqualsExpression>
				<SatisfiesExpression>true</SatisfiesExpression>
			</Properties>
		</StatechartElement>
		<StatechartElement Class="Transition" ParentState="ROOT_NODE">
			<Id>1714649890295</Id>
			<Name><![CDATA[transition10]]></Name>
			<X>200</X>
			<Y>605</Y>
			<Label>
				<X>10</X>
				<Y>0</Y>
			</Label>
			<PublicFlag>false</PublicFlag>
			<PresentationFlag>true</PresentationFlag>
			<ShowLabel>false</ShowLabel>
			<Points>
				<Point>
					<X>0</X>
					<Y>0</Y>
				</Point>
				<Point>
					<X>0</X>
					<Y>55</Y>
				</Point>
			</Points>
			<IconOffset>20.0</IconOffset>
			<Properties Source="1714649848910" Target="1712645008248" Trigger="timeout">
				<Action>//traceln("Transition - Train "+parDirection+" has exited stTransition to stMoving "+time(HOUR));</Action>
				<Timeout Class="CodeUnitValue">
					<Code><![CDATA[0.05]]></Code>
					<Unit Class="TimeUnits">SECOND</Unit>
				</Timeout>
				<Condition>parDirection == "Left" &amp;&amp;
time(HOUR) &gt;= colTB.get(0).varTimeEnd</Condition>
				<Rate Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="RateUnits">PER_SECOND</Unit>
				</Rate>
				<MessageType>Object</MessageType>
				<DefaultTransition>true</DefaultTransition>
				<FilterType>unconditionally</FilterType>
				<EqualsExpression>"text"</EqualsExpression>
				<SatisfiesExpression>true</SatisfiesExpression>
			</Properties>
		</StatechartElement>
		<StatechartElement Class="Transition" ParentState="ROOT_NODE">
			<Id>1714650030039</Id>
			<Name><![CDATA[transition11]]></Name>
			<X>410</X>
			<Y>575</Y>
			<Label>
				<X>10</X>
				<Y>0</Y>
			</Label>
			<PublicFlag>false</PublicFlag>
			<PresentationFlag>true</PresentationFlag>
			<ShowLabel>false</ShowLabel>
			<Points>
				<Point>
					<X>0</X>
					<Y>0</Y>
				</Point>
				<Point>
					<X>0</X>
					<Y>-55</Y>
				</Point>
			</Points>
			<IconOffset>20.0</IconOffset>
			<Properties Source="1714649980810" Target="1712644973770" Trigger="timeout">
				<Action>//traceln("Transition - Train "+parDirection+" has exited stTransition1 to stStationary "+time(HOUR));</Action>
				<Timeout Class="CodeUnitValue">
					<Code><![CDATA[0.05]]></Code>
					<Unit Class="TimeUnits">SECOND</Unit>
				</Timeout>
				<Condition>parDirection == "Left" &amp;&amp;
time(HOUR) &gt;= colTB.get(0).varTimeEnd</Condition>
				<Rate Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="RateUnits">PER_SECOND</Unit>
				</Rate>
				<MessageType>Object</MessageType>
				<DefaultTransition>true</DefaultTransition>
				<FilterType>unconditionally</FilterType>
				<EqualsExpression>"text"</EqualsExpression>
				<SatisfiesExpression>true</SatisfiesExpression>
			</Properties>
		</StatechartElement>
		<StatechartElement Class="Transition" ParentState="ROOT_NODE">
			<Id>1715069838715</Id>
			<Name><![CDATA[transition2]]></Name>
			<X>420</X>
			<Y>690</Y>
			<Label>
				<X>10</X>
				<Y>0</Y>
			</Label>
			<PublicFlag>false</PublicFlag>
			<PresentationFlag>true</PresentationFlag>
			<ShowLabel>false</ShowLabel>
			<Points>
				<Point>
					<X>0</X>
					<Y>0</Y>
				</Point>
				<Point>
					<X>0</X>
					<Y>70</Y>
				</Point>
				<Point>
					<X>-220</X>
					<Y>69</Y>
				</Point>
				<Point>
					<X>-220</X>
					<Y>0</Y>
				</Point>
			</Points>
			<IconOffset>330.0</IconOffset>
			<Properties Source="1712645008248" Target="1712645008248" Trigger="condition">
				<Action>Segment segment = (Segment)colRoute.get(0);
//varVelocity = min(parCruiseVelocity, segment.parMaxSpeed);
//traceln("Transition - Train "+parDirection+" has entered Node "+time(HOUR));</Action>
				<Timeout Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="TimeUnits">SECOND</Unit>
				</Timeout>
				<Condition>parDirection == parModel.parTrainFromDistance0 &amp;&amp;
colTB.get(1).parResource instanceof Segment &amp;&amp;
time(HOUR) &gt;= colTB.get(0).varTimeEnd</Condition>
				<Rate Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="RateUnits">PER_SECOND</Unit>
				</Rate>
				<MessageType>Object</MessageType>
				<DefaultTransition>true</DefaultTransition>
				<FilterType>equalsTo</FilterType>
				<EqualsExpression>"TakingCross"</EqualsExpression>
				<SatisfiesExpression>true</SatisfiesExpression>
			</Properties>
		</StatechartElement>
		<StatechartElement Class="Transition" ParentState="ROOT_NODE">
			<Id>1715069846597</Id>
			<Name><![CDATA[transition12]]></Name>
			<X>400</X>
			<Y>690</Y>
			<Label>
				<X>10</X>
				<Y>0</Y>
			</Label>
			<PublicFlag>false</PublicFlag>
			<PresentationFlag>true</PresentationFlag>
			<ShowLabel>false</ShowLabel>
			<Points>
				<Point>
					<X>0</X>
					<Y>0</Y>
				</Point>
				<Point>
					<X>0</X>
					<Y>50</Y>
				</Point>
				<Point>
					<X>-180</X>
					<Y>50</Y>
				</Point>
				<Point>
					<X>-180</X>
					<Y>0</Y>
				</Point>
			</Points>
			<IconOffset>30.0</IconOffset>
			<Properties Source="1712645008248" Target="1712645008248" Trigger="condition">
				<Action>Segment segment = (Segment)colRoute.get(0);
//varVelocity = max(parCruiseVelocity, -segment.parMaxSpeed);
//traceln("Transition - Train "+parDirection+" has entered Node "+time(HOUR));</Action>
				<Timeout Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="TimeUnits">SECOND</Unit>
				</Timeout>
				<Condition>parDirection == parModel.parTrainFromDistanceX &amp;&amp;
colTB.get(1).parResource instanceof Segment &amp;&amp;
time(HOUR) &gt;= colTB.get(0).varTimeEnd</Condition>
				<Rate Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="RateUnits">PER_SECOND</Unit>
				</Rate>
				<MessageType>Object</MessageType>
				<DefaultTransition>true</DefaultTransition>
				<FilterType>equalsTo</FilterType>
				<EqualsExpression>"TakingCross"</EqualsExpression>
				<SatisfiesExpression>true</SatisfiesExpression>
			</Properties>
		</StatechartElement>
	</StatechartElements>
	<Events xmlns:al="http://anylogic.com"/>
	<Functions xmlns:al="http://anylogic.com"/>
	<AnalysisData>
		<DataSet>
			<Id>1712730311276</Id>
			<Name><![CDATA[dsTrain]]></Name>
			<X>540</X>
			<Y>495</Y>
			<Label>
				<X>15</X>
				<Y>0</Y>
			</Label>
			<PublicFlag>false</PublicFlag>
			<PresentationFlag>true</PresentationFlag>
			<ShowLabel>true</ShowLabel>
			<AutoUpdate>false</AutoUpdate>
			<OccurrenceAtTime>true</OccurrenceAtTime>
			<OccurrenceDate>1712736000000</OccurrenceDate>
			<OccurrenceTime Class="CodeUnitValue">
				<Code><![CDATA[0]]></Code>
				<Unit Class="TimeUnits">SECOND</Unit>
			</OccurrenceTime>
			<RecurrenceCode Class="CodeUnitValue">
				<Code><![CDATA[1]]></Code>
				<Unit Class="TimeUnits">SECOND</Unit>
			</RecurrenceCode>
			<FreezeXAxis>true</FreezeXAxis>
			<SamplesToKeep>1300</SamplesToKeep>
		</DataSet>
	</AnalysisData>
	<AgentLinks>
		<AgentLink>
			<Id>1712308662909</Id>
			<Name><![CDATA[connections]]></Name>
			<X>30</X>
			<Y>-60</Y>
			<Label>
				<X>15</X>
				<Y>0</Y>
			</Label>
			<PublicFlag>false</PublicFlag>
			<PresentationFlag>true</PresentationFlag>
			<ShowLabel>true</ShowLabel>
			<OnReceive>traceln("Message Recieved");</OnReceive>
			<HandleReceiveInConnections>false</HandleReceiveInConnections>
			<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
			<AgentLinkBidirectional>true</AgentLinkBidirectional>
			<MessageType>Object</MessageType>
			<StatechartReference>
				<PackageName>railyardexercise_crossingloops</PackageName>
				<ClassName>Train</ClassName>
				<ItemName>statechart</ItemName>
			</StatechartReference>
			<LineStyle>SOLID</LineStyle>
			<LineWidth>1</LineWidth>
			<LineColor>-16777216</LineColor>
			<LineZOrder>UNDER_AGENTS</LineZOrder>
			<LineArrow>NONE</LineArrow>
			<LineArrowPosition>END</LineArrowPosition>
		</AgentLink>
	</AgentLinks>
	<ContainerLinks>
		<ContainerLink>
			<Id>1712308703044</Id>
			<Name><![CDATA[model]]></Name>
			<X>40</X>
			<Y>160</Y>
			<Label>
				<X>10</X>
				<Y>0</Y>
			</Label>
			<PublicFlag>false</PublicFlag>
			<PresentationFlag>true</PresentationFlag>
			<ShowLabel>true</ShowLabel>
			<ActiveObjectClass>
				<PackageName>railyardexercise_crossingloops</PackageName>
				<ClassName>Model</ClassName>
			</ActiveObjectClass>
		</ContainerLink>
	</ContainerLinks>
	<Presentation>
		<Level>
			<Id>1712308662915</Id>
			<Name><![CDATA[level]]></Name>
			<X>0</X>
			<Y>0</Y>
			<Label>
				<X>10</X>
				<Y>0</Y>
			</Label>
			<PublicFlag>true</PublicFlag>
			<PresentationFlag>true</PresentationFlag>
			<ShowLabel>false</ShowLabel>
			<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
			<Z>0</Z>
			<LevelVisibility>DIM_NON_CURRENT</LevelVisibility>
			<Presentation xmlns:al="http://anylogic.com"/>
		</Level>
	</Presentation>
</ActiveObjectClass>
